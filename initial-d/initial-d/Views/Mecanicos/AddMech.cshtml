@model initial_d.Models.APIModels.Mecanico

@{
    ViewBag.Title = "Agregar Mecánico";
    
    var userTypeList = (SelectList)ViewBag.userTypeLst;
    var userStatusList = (SelectList)ViewBag.userStatusLst;

    string mechId = "MEC";

    string GoBack_Url = Url.Action("MechList", "Mecanicos");
}

@Styles.Render("~/Content/CSS/mecanicos-general.css")

<div class="header">

    <div class="header-title">
        <h2>
            <i class="fa fa-plus" aria-hidden="true"></i>
            Agregar Mecánico
        </h2>
    </div>

</div>


@using (Html.BeginForm())
{
    @Html.HiddenFor(m => m.appuser_id);
    @Html.HiddenFor(m => m.user_type_id, new { @Value = mechId })
    @Html.HiddenFor(m => m.hasDebt)
    @Html.HiddenFor(m => m.hasPendingPublication)

    <div class="row justify-content-around mb-4">

        <div class="col-12 col-ms-11 col-md-10 col-lg-6 px-lg-2">
            <div class="c-jumbotron">
                <h3 class="mb-4"> Información de Sistema </h3>

                <table class="table table-borderless c-info-table c-table-sm-responsive table-th-compact">
                    <tr>
                        <th>@Html.DisplayNameFor(m => m.username)</th>
                        <td>
                            @Html.TextBoxFor(m => m.username, new { @class = "form-control" })
                            @Html.ValidationMessageFor(x => x.username)
                        </td>
                    </tr>
                    <tr>
                        <th>@Html.DisplayNameFor(m => m.hash)</th>
                        <td>
                            @Html.PasswordFor(m => m.hash, new { @class = "form-control" })
                            @Html.ValidationMessageFor(x => x.hash)
                        </td>
                    </tr>
                    <tr>
                        <th>Repita la Contraseña</th>
                        <td>
                            <input type="password" name="hash_validation" id="hash_validation" value="" class="form-control" />
                            <span class="field-validation-valid" data-valmsg-for="hash_validation" data-valmsg-replace="true"></span>
                        </td>
                    </tr>
                    <tr>
                        <th>@Html.DisplayNameFor(m => m.status_id)</th>
                        <td>
                            @Html.DropDownListFor(m => m.status_id, userStatusList, new { @class = "custom-select custom-select-sm form-control" })
                            @Html.ValidationMessageFor(x => x.status_id)
                        </td>
                    </tr>
                </table>

            </div>
        </div>

        <div class="col-12 col-ms-11 col-md-10 col-lg-6 px-lg-2">
            <div class="c-jumbotron">
                <h3 class="mb-4"> Información Personal </h3>

                <table class="table table-borderless c-info-table c-table-left c-table-sm-responsive table-th-compact">
                    <tr>
                        <th>@Html.DisplayNameFor(m => m.name)</th>
                        <td>
                            @Html.TextBoxFor(m => m.name, new { @class = "form-control" })
                            @Html.ValidationMessageFor(x => x.name)
                        </td>
                    </tr>
                    <tr>
                        <th>@Html.DisplayNameFor(m => m.last_names)</th>
                        <td>
                            @Html.TextBoxFor(m => m.last_names, new { @class = "form-control" })
                            @Html.ValidationMessageFor(x => x.last_names)
                        </td>
                    </tr>
                    <tr>
                        <th>@Html.DisplayNameFor(m => m.rut)</th>
                        <td>
                            @Html.TextBoxFor(m => m.rut, new { @class = "form-control" })
                            @Html.ValidationMessageFor(x => x.rut)
                        </td>
                    </tr>
                    <tr>
                        <th>@Html.DisplayNameFor(m => m.email)</th>
                        <td>
                            @Html.TextBoxFor(m => m.email, new { @class = "form-control" })
                            @Html.ValidationMessageFor(x => x.email)
                        </td>
                    </tr>
                    <tr>
                        <th>@Html.DisplayNameFor(m => m.adress)</th>
                        <td>
                            @Html.TextBoxFor(m => m.adress, new { @class = "form-control" })
                            @Html.ValidationMessageFor(x => x.adress)
                        </td>

                    </tr>
                    <tr>
                        <th>@Html.DisplayNameFor(m => m.phone)</th>
                        <td>
                            @Html.TextBoxFor(m => m.phone, new { @class = "form-control" })
                            @Html.ValidationMessageFor(x => x.phone)
                        </td>
                    </tr>
                    <tr>
                        <th>@Html.DisplayNameFor(m => m.birthday)</th>
                        <td>
                            @Html.TextBoxFor(m => m.birthday, new { @class = "form-control datepicker-bd", @Value = string.Empty })
                            @Html.ValidationMessageFor(x => x.birthday)
                        </td>
                    </tr>
                </table>

            </div>
        </div>

    </div>

    <div>
        <a href="@GoBack_Url" class="btn btn-sm btn-secondary mr-3" role="button">
            <i class="fa fa-backspace" aria-hidden="true"></i>
            Cancelar
        </a>
        <button href="#" class="btn btn-sm btn-green mr-3" role="button">
            <i class="fa fa-plus" aria-hidden="true"></i>
            Agregar
        </button>
    </div>

}


@section customScripts{
    @Html.Partial("Partial/_DatePickerBoilerplate")

    <script>
        // Toggle "Email Confirmed" checkbox when the row is clicked
        $(document).on('click', '#mail_confirmed_col', function () {
            let c = $('#mail_confirmed').prop("checked")
            $('#mail_confirmed').prop("checked", !c);
        });
        
        
        $('.datepicker-bd').datepicker({
            startDate: '-110y',
            endDate: '-18y'
        });

        $(function() {
            // Validar que ambas contraseñas sean iguales
            $('#hash_validation').rules('add', { 
                equalTo: "#hash", 
                required: true,
                messages: { 
                    equalTo: 'Las contraseñas deben ser iguales',
                    required: 'Este campo es obligatorio'
                } 
            });

            $.validator.addMethod(
                "regex",
                function(value, element, regexp) {
                    var re = new RegExp(regexp);
                    return this.optional(element) || re.test(value);
                },
                "Rut Invalido. Debe tener el formato: 12.123.123-1"
            );

            $('#rut').rules('add', {
                regex: /^\d{1,2}\.\d{3}\.\d{3}-[k|K|\d]{1}$/
            });

        });
    </script>
}
