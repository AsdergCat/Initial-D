@model IEnumerable<initial_d.Models.APIModels.Usuario>
@{
    ViewBag.Title = "Admin. de Clientes";

    // To Keep an State on the Search Filters
    string userName = ViewBag.userName ?? string.Empty;
    string userEmail = ViewBag.userEmail ?? string.Empty;
    var userTypeList = (SelectList)ViewBag.userTypeLst;
    var userStatusList = (SelectList)ViewBag.userStatusLst;
    
    string banId = "BAN";

    // Action Url
    string addUrl = Url.Action("AddUser", "Usuarios");
    string delList = Url.Action("DeletedUserList", "Usuarios");
    // detailsUrl on Document
}

<!-- HEADER | ACTION BUTTONS -->
<div class="header ">

    <div class="header-title">
        <h2>
            <i class="fa fa-users" aria-hidden="true"></i>
            Administrador de Usuarios
        </h2>
    </div>
    
    <!-- BUTTONS -->
    <div class="header-buttons">
        <a href="@delList" class="btn btn-sm btn-secondary mr-3" role="button">
            <i class="fa fa-trash" aria-hidden="true"></i>
            Usuarios Eliminados
        </a>
        <a href="@addUrl" class="btn btn-sm btn-green" role="button">
            <i class="fa fa-user-plus"></i>
            Agregar Usuario
        </a>
    </div>

</div>

<!-- BUSCAR -->
<div class="mb-4">

    @using (Html.BeginForm("UserList", "Usuarios", FormMethod.Get, new { @class = "" }))
    {
        <div class="form-row">

            <div class="d-flex align-content-center d-md-none bg-white rounded w-100 py-2 px-3 mb-2 cursor-pointer border" 
                 data-toggle="collapse" href="#search-collapse">
                <h5 class="m-0 font-weight-bold">Buscar</h5>
                <i class="ml-auto fa fa-chevron-down align-self-center" aria-hidden="true"></i>
            </div>

            <div id="search-collapse" class="collapse row col-12">

                <div class="col-12 col-md-11">
                    <div class="row">
                        <div class="input-group col-12 col-md-6 col-lg-3 mb-2 mb-lg-0 pr-0 pr-md-3">
                            <input class="form-control form-control-sm h-100" type="text" 
                                   name="userName" placeholder="Nombre de Usuario" value="@userName">
                        </div>
                        <div class="input-group col-12 col-md-6 col-lg-3 mb-2 mb-lg-0 pr-0 pr-md-3">
                            <input class="form-control form-control-sm h-100" type="text" 
                                   name="userEmail" placeholder="Email" value="@userEmail">
                        </div>
                        <div class="input-group col-12 col-md-6 col-lg-3 mb-2 mb-md-0 pr-0 pr-md-3">
                            @Html.DropDownList("userTypeId", userTypeList, "Tipo", new { @class = "custom-select custom-select-sm form-control" })
                        </div>
                        <div class="input-group col-12 col-md-6 col-lg-3 mb-2 mb-md-0 pr-0 pr-md-3">
                            @Html.DropDownList("userStatusId", userStatusList, "Status", new { @class = "custom-select custom-select-sm form-control" })
                        </div>
                    </div>
                </div>

                <div class="col col-md-1 h-auto">
                    <button class="btn btn-sm btn-yellow w-100 h-100" role="button" type="submit">
                        <i class="fa fa-search" aria-hidden="true"></i>
                    </button>
                </div>
            </div>

        </div>
    }
</div>

<!-- DATA TABLE -->
<div class=" d-flex justify-content-center ">
    <table class="table c-info-table c-table-sm-responsive c-table-bordered">

        <thead>
            <tr>
                <th>Actions</th>
                <th>@Html.DisplayNameFor(m => m.username)</th>
                <th class="cell-hidden-lg">@Html.DisplayNameFor(m => m.fullName)</th>
                <th>
                    <div>
                        @Html.DisplayNameFor(m => m.email)
                    </div>
                </th>
                <th>@Html.DisplayNameFor(m => m.user_type_id)</th>
                <th>@Html.DisplayNameFor(m => m.status_id)</th>
            </tr>
        </thead>

        <tbody>
            @* Print one row by User *@
            @foreach (var user in Model)
            {
                string detailsUrl = Url.Action("UserDetails", "Usuarios", new { userId = user.appuser_id });
                string userStatus = user.status_id;
                bool? isBanned = userStatus?.Equals(banId);

                <tr class="clickable-row" data-url="@detailsUrl">

                    <!-- ACTION DROPDOWN -->
                    <td data-label="Actions" class="not-clickable">
                        @Html.Partial("Partial/_ContextualActionDropdown", new ViewDataDictionary(user) { { "context", "list" } } )
                    </td>

                    <!-- USERNAME -->
                    <td data-label="@Html.DisplayNameFor(m => m.username)">
                        @if (isBanned != null)
                        {
                            var statClass = isBanned == true ? "fa-user-lock text-danger" : "fa-user-check color-green";
                            <div class="w-max-content-sm">
                                <i class=" fa mr-1 @statClass" aria-hidden="true"></i>
                                @Html.DisplayFor(m => user.username)
                            </div>
                        }
                    </td>

                    <!-- FULL NAME -->
                    <td data-label="@Html.DisplayNameFor(m => m.fullName)" class="cell-hidden-lg">
                        @Html.DisplayFor(m => user.fullName)
                    </td>

                    <!-- EMAIL -->
                    <td data-label="@Html.DisplayNameFor(m => m.email)">
                        @Html.ValueFor(m => user.email)
                    </td>

                    <!-- USER TYPE -->
                    <td data-label="@Html.DisplayNameFor(m => m.user_type_id)">
                        @Html.DisplayFor(m => user.user_type_name)
                    </td>

                    <!-- STATUS -->
                    <td data-label="@Html.DisplayNameFor(m => m.status_id)">
                        @Html.DisplayFor(m => user.status_name)
                    </td>
                </tr>
            }
        </tbody>

    </table>

</div>



<a href="@Url.Action("UserDetails", "Usuarios", new { userId = "FFF" })" class="btn btn-xsm btn-secondary mr-2" role="button">
    <i class="fa fa-bug mr-1" aria-hidden="true"></i>
    TRIGGER PARA ID NO INVÁLIDO
</a>

@Html.Partial("Partial/_ToggleUserStatusModal")
@Html.Partial("Partial/_DeleteModalAndScript")
@Html.Partial("Partial/_ChangeTypeModal")


@section customScripts{
    <script>

        /** When the user clicks on a cell inside a .clickable-row, it redirect them to the User Details view of that User.
         * Use .not-clickable on a cell to exclude it from the event */
        $(document).on('click', '.clickable-row td:not(.not-clickable)', function () {
            // Get the row
            let row = $(this).closest('.clickable-row');
            // Assemble the URL
            let url = row.data('url');
            // Redirect the window
            window.location = url;
        });



        /* From here on everything is all to make the Search Bar responsive */

        // Check if the viewport is in a Bootstrap breakpoint
        var isBreakpoint = function (viewport_size) {
            //if (isBreakpoint('xs')) {
            //    console.log('IS XS');
            //}
            //if (isBreakpoint('sm')) {
            //    console.log('IS SM');
            //}
            //if (isBreakpoint('md')) {
            //    console.log('IS MD');
            //}
            //if (isBreakpoint('lg')) {
            //    console.log('IS LG');
            //}

            return $('.device-' + viewport_size).is(':visible')
        }

        // Set the system for isBreakpoint to work and initialize the Search Bar Visibility
        $(document).ready(function () {
            var test_divs = "<div class='device-xs d-none d-xs-block'></div>";
            test_divs = test_divs + "<div class='device-sm d-none d-sm-block visible-sm'></div>";
            test_divs = test_divs + "<div class='device-md d-none d-md-block visible-md'></div>";
            test_divs = test_divs + "<div class='device-lg d-none d-lg-block visible-lg'></div>";
            $("body").append(test_divs);

            updateSearchVisibility()
        })


        // Update the Search bar visibility
        function updateSearchVisibility() {
            // If the the viewport is > md, show the bar
            if (isBreakpoint('md')){
                $('#search-collapse').addClass('show');
            }
            // If the the viewport is < md, hide the bar
            else {
                $('#search-collapse').removeClass('show');
            }
        }

        // Update the Search Bar Visibility on window rezise
        $(window).on('resize', debounce(function(e){
            updateSearchVisibility();
        }));

        // This make an action on
        function debounce(func){
          var timer;
          return function(event){
            if(timer) clearTimeout(timer);
            timer = setTimeout(func,100,event);
          };
        }

    </script>
}
